<-------------------------------BINARY TREE  FROM  PREORDER AND INORDER TRAVERSAL---------------------------------->


int prein=0;
    int search(vector<int>& pre, vector<int>& in,int lb,int ub,int data)
    {
        for(int i=lb;i<=ub;i++)
        {
            if(in[i]==data)
            return i;
        }
        return 0;
    }
    TreeNode*build(vector<int>& pre, vector<int>& in,int lb,int ub)
    {
        if(lb>ub)
        return NULL;
        TreeNode*node=new TreeNode(pre[prein++]);
        if(lb==ub)
        return node;
        int mid=search(pre,in,lb,ub,node->val);
        node->left=build(pre,in,lb,mid-1);
        node->right=build(pre,in,mid+1,ub);
        return node;
    }
    TreeNode* buildTree(vector<int>& pre, vector<int>& in) {
       TreeNode*root=build(pre,in,0,pre.size()-1);
       return root;
    }

<----------------Minimum Swaps Required to Convert Binary tree  to BST------------------------>

void inorder(vector<int>&v,vector<int>&v1,int k)
    {
        if(k>=v.size())
        return;
        inorder(v,v1,2*k+1);
        v1.push_back(v[k]);
        inorder(v,v1,2*k+2);
    }
    int minSwaps(vector<int>&v, int n)
    {
        int k,swaps=0;
        vector<int>v1;
        inorder(v,v1,0);
        vector<pair<int,int>>v2;
        for(int i=0;i<v1.size();i++)
        {
            v2.push_back({v1[i],i});
        }
        sort(v2.begin(),v2.end());
        for(int i=0;i<v2.size();i++)
        {
            if(v2[i].second==i)
            continue;
            else
            {
                swaps++;
                swap(v2[i],v2[v2[i].second]);
                i--;
            }
        }
        return swaps;
    }