// C++ Program for the above approach

#include<bits/stdc++.h>
using namespace std;

struct Node{
	int data;
	Node* left;
	Node* right;
	Node(int data){
		this->data = data;
		this->left = NULL;
		this->right = NULL;
	}
};

struct QueueObj{
	Node* node;
	int hd;
	QueueObj(Node *node, int hd){
		this->node = node;
		this->hd = hd;
	}
};

void topView(Node* root){
	if(root == NULL) return;
	
	queue<QueueObj*> q;
	map<int, int> mp;
	int mn = 0;
	int mx = 0;
	// Level Order Traversal
	q.push(new QueueObj(root, 0));
	while(!q.empty()){
		QueueObj* curr = q.front();
		q.pop();
		
		// only include in map if this is the
		// first node of this specific
		// horizontal distance
		if(mp.find(curr->hd) == mp.end()){
			mp[curr->hd] = curr->node->data;
		}
		
		if(curr->node->left != NULL){
			// min can be found only in left side due to
			// "-1" minimum horizontal distance of any
			// node from root
			mn = min(mn, curr->hd-1);
			q.push(new QueueObj(curr->node->left, curr->hd-1));
		}
		
		if(curr->node->right != NULL){
			// max can be found only in right side due to
			// "+1" maximum horizontal distance of any
			// node from root
			mx = max(mx, curr->hd+1);
			q.push(new QueueObj(curr->node->right, curr->hd+1));
		}
	}
	
	// traversal of (horizontal distance from rooo)
	// minimum to maximum
	for(; mn<=mx; mn++){
		cout<<mp[mn]<<" ";
	}
	cout<<endl;
}

int main(){
	Node* root = new Node(1);
	root->left = new Node(2);
	root->right = new Node(3);
	root->left->right = new Node(4);
	root->left->right->right = new Node(5);
	root->left->right->right->right = new Node(6);
	cout<<"Following are nodes in top view of Binary Tree"<<endl;
	topView(root);
	return 0;
}

// This code is contributed by Yash Agarwal(yashagarwal2852002)
